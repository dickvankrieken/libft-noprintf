#+TITLE: printf.org

** [[main.c]]
** [[Makefile]]

** [[includes]]
*** [[includes/ft_printf.h]]

** [[srcs/libft/]]
*** [[srcs/libft/Makefile]]

** [[srcs]]
*** [[srcs/ft_printf.c]]
**** int 	pf_init_convspecs(t_convert * p)
**** void 	pf_argtostruct(t_convert * p)
**** int	pf_check_conversion(char * format, t_convert * p)
**** int	pf_parse(char * format, va_list ap)
**** int 	ft_printf(const char * format, ...)
*** [[srcs/pf_checkfunctions.c]]
**** int	pf_checkflag(char * format, t_convert * p)
**** int	pf_checkprecision(char * format, t_convert *p)
**** int	pf_checkasterisk(char * format, t_convert * p)
**** int	pf_checkwidthdigit(char * format, t_convert * p)
**** int	pf_checktype(char * format, t_convert * p)
*** [[srcs/pf_ultohex.c]]
**** char	*pf_ultohex(unsigned long n, int isupper)

** [[srcs/putfunctions]]
*** [[srcs/putfunctions/pf_putfunctions.c]]
**** char	* pf_putconversion(t_convert * p)
**** void	pf_putc(t_convert * p)
**** void	pf_putspaces(int len)
**** void	pf_putzero(int len)
** [[srcs/putfunctions/puts]]
*** [[srcs/putfunctions/puts/pf_puts.c]]
**** void	pf_puts(t_convert * p)
*** [[srcs/putfunctions/puts/pf_puts_width.c]]
**** void	pf_puts_width(t_convert * p)
*** [[srcs/putfunctions/puts/pf_puts_minus.c]]
**** void	pf_puts_minus_width_precision(t_convert *p)

** [[srcs/putfunctions/putd]]
*** [[srcs/putfunctions/putd/pf_putd.c]]
**** void	pf_putd(t_convert * p)
**** int	pf_putd_precision(t_convert * p)
**** void	pf_putd_width_precision(t_convert * p)
*** [[srcs/putfunctions/putd/pf_putd_minus.c]]
**** void	pf_putd_minus(t_convert * p)
**** void	pf_putd_minus_width_precision(t_convert *p)
**** void	pf_putd_minus_width(t_convert * p)
*** [[srcs/putfunctions/putd/pf_putd_zero.c]]
**** void	pf_putd_zero(t_convert * p)
**** void	pf_putd_zero_width(t_convert *p)

** [[srcs/putfunctions/putp/]]
*** [[srcs/putfunctions/putp/pf_putp.c]]
**** void	pf_putp(t_convert * p)

** [[srcs/putfunctions/putx/]]
*** [[srcs/putfunctions/putx/pf_putx.c]]

** [[srcs/putfunctions/putpercentage/]]
*** TODO [[srcs/putfunctions/putx/pf_putpercentage.c]]

** DONE [[srcs/putfunctions/putu/]]
*** DONE [[srcs/putfunctions/putu/pf_putu.c]]
*** DONE [[srcs/putfunctions/putu/pf_uitoa.c]]
*** DONE [[srcs/putfunctions/putu/pf_putu_minus.c]]
*** DONE [[srcs/putfunctions/putu/pf_putu_zero.c]]

* TODOLIST
** DONE c
** TODO s
** DONE p
** DONE d
** DONE i
** DONE u
** DONE x
** DONE X
** TODO %
*** TODO width
*** TODO precision
*** TODO minus
*** TODO

** DONE onderzoeken wat de teruggave waarde van de originele printf is -> subject PDF && ISO C Standard PDF
   The fprintf function returns the number of characters transmitted, or a negative value if an output or encoding error occurred.
   Dus het aantal neergezette karakters wordt gereturnt.
   Dus ik moet me ergens mee gaan bezig houden namelijk dat het juiste aantal karakters gereturnt worden.
** TODO Elke keer als er iets gezet wordt moet de p->printcounter met 1 verhoogt worden.
