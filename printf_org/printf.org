#+TITLE: Mijn ft_printf

* TODO conv_c en conv_s maken
* TODO conv_num

* projectfolders and files
** [[../dev/]]
  [[../dev/main.c]]

  [[../dev/Makefile]]

** [[../dev/includes]]
   [[../dev/includes/ft_printf.h]]
** [[../dev/srcs]]
  [[../dev/srcs/ft_printf.c]]
  [[../dev/srcs/helperfunctions.c]]
  [[../dev/srcs/ft_conv_c.c]]

** [[../printf_org/]]
   [[../printf_org/main.c]]

* functies
** ft_print
   deze functie opent de va_list en roept ft_parse aan
** ft_parse
   inputstring doorloopen
   als % gevonden is roepen we ft_check_conversion aan die de conversie gaat analyzeren
** ft_check_conversion
   deze functie gaat de format vanaf een % analyzeren
   dat doet ie door karakter voor karakter te kijken of het een geldige conversiespecifier is
   en alle flags en relevante info in de struct te stoppen.
   Wanneer de type specificatie gevonden is wordt het aantal verwerkte karakters (i) gereturnt.
** ft_checktype
** ft_checkflag
** ft_checkprecision
** ft_checkwidth
** conversiefuncties
*** ft_conv_c
    als de conv_type een character is gaat deze functie de character combineren met de conv_specs en daarmee converteren naar een printbare string
*** ft_conv_num
*** ft_conv_p
*** ft_conv_o
*** ft_conv_x
*** ft_conv_X
*** ft_conv_u



* Beschrijving van de printf functie.
** eerst optioneel een - en/of 0
*** minus - left-justify
    the result of the conversion is left-justified within the field (right-justified if not specified)
*** nul
    field is padded with 0's instead of blanks

** dan een optionele precision in de vorm van een punt (.) eventueel gevolgd door een asterisk * of een optionele decimale integer.
   dat bepaald wat het minimale hoeveelheid nummers is dat moet verschijnen voor de d, i, u, x en X conversies
   als er alleen een punt staat is de precisie 0.

** dan een optionele field width in de vorm van een asterisk (*) of een niet-negatieve decimale integer
** conversion specifier: cspdiuxX%
   dit zijn de conversie specificaties die de printf moet kunnen verwerken.
*** c: character
*** s: string...
*** p: pointer
    het argument zal een pointer naar void zijn. De waarde zal geconverteerd worden naar een rij van karakters
*** d: digit
    gewoon een heel getal
*** i: integer
    ook gewoon een heel getal (schijnt weinig verschil te hebben met digit)
*** u: unsiged int
    getal dat unsigned is d.w.z. dat het niet negatief kan zijn en een hogere bereik heeft in positieve waardes.
*** x: unsigned hexadecimal notation
   hexadecimale notatie van een argument
*** X: unSIGNED hexadecimal notation in CAPS
    hetzelfde maar dan in hoofdletters
 Een overzicht maken van de verschillende manieren waarop je printf kunt gebruiken zodat je de betekenis leert kennen van alle verschillende soorten valide (en invalide) invoer.

* oefenen met de originele printf
** met BABEL in deze org buffer

 #+begin_src C :results value code :includes <stdio.h> <unistd.h>
int a = 100;
char c = 'c';
char d = 'd';

char *string = "hello world";
char *string2 = "bye world";
char *pointer = string;
char **ppointer = pointer;

/* 1 min of nul */
printf("%s, |%90c|", string, c);

 #+end_src

 #+RESULTS:
 #+begin_src C
 hello world, |                                                                                         c|
 #+end_src

** in een aparte file en compileren via een shell
   [[./printfpractice.c]]
