#+TITLE: ft_printf

* agenda
** TODO org en remarkable en de projectbestanden synchronizeren
** TODO put_c en put_s maken
** TODO conv_num


* directories/files/functions
** de development folder: [[../dev/]]
*** main om mee te testen: [[../dev/main.c]]
*** de Makefile [[../dev/Makefile]]
** de headerfiles [[../dev/includes]]
*** [[../dev/includes/ft_printf.h]]
**** de t_convert struct
     typedef struct s_convert
     va_list	ap;
     int		printcounter;
     int		width;
     int		precision;
     bool		minus;
     bool		zero;
     char		type;
     char		c;
     char		*s;
     int		p;
     int		d;
     int		i;
     unsigned int	u;
     char		*x;
     char		*X;
     t_convert;
** de sources folder [[../dev/srcs]]
*** [[../dev/srcs/ft_printf.c]]
**** int 	ft_init_convspecs
**** void 	ft_argtostruct(t_convert *conv_specs)
     in deze functie wil ik het te converteren argument in de struct zetten
**** int	ft_check_conversion(char *format, t_convert *conv_specs)
**** int	ft_parse(char *format, va_list ap)
     inputstring doorloopen
     als % gevonden is roepen we ft_check_conversion aan die de conversie gaat analyzeren
     deze functie gaat de format vanaf een % analyzeren
     dat doet ie door karakter voor karakter te kijken of het een geldige conversiespecifier is
     en alle flags en relevante info in de struct te stoppen.
     Wanneer de type specificatie gevonden is wordt het aantal verwerkte karakters (i) gereturnt.
**** int 	ft_printf
     deze functie opent de va_list en roept ft_parse aan
*** [[../dev/srcs/helperfunctions.c]]
**** int	ft_checkflag(char *format, t_convert *conv_specs)
**** int	ft_checkprecision(char *format, t_convert *conv_specs)
**** int	ft_checkasterisk(char *format, t_convert *conv_specs)
**** int	ft_checkwidthdigit(char *format, t_convert *conv_specs)
**** int	ft_checktype(char *format, t_convert *conv_specs)
*** [[../dev/srcs/putfunctions.c]]
**** char	*ft_putconversions(t_convert *conv_specs)
     in deze functie gaat de conv_specs gecombineerd worden met het variatische argument en worden de gespecificeerde karakters geprint
** [[../printf_org/]]
*** [[../printf_org/main.c]]
*** [[../printf_org/printf.org]]


* omschrijving van de printf functie.
** eerst optioneel een - en/of 0
*** minus - left-justify
    the result of the conversion is left-justified within the field (right-justified if not specified)
*** nul
    field is padded with 0's instead of blanks

** dan een optionele precision in de vorm van een punt (.) eventueel gevolgd door een asterisk * of een optionele decimale integer.
   dat bepaald wat het minimale hoeveelheid nummers is dat moet verschijnen voor de d, i, u, x en X conversies
   als er alleen een punt staat is de precisie 0.

** dan een optionele field width in de vorm van een asterisk (*) of een niet-negatieve decimale integer
** conversion specifier: cspdiuxX%
   dit zijn de conversie specificaties die de printf moet kunnen verwerken.
*** c: character
*** s: string...
*** p: pointer
    het argument zal een pointer naar void zijn. De waarde zal geconverteerd worden naar een rij van karakters
*** d: digit
    gewoon een heel getal
*** i: integer
    ook gewoon een heel getal (schijnt weinig verschil te hebben met digit)
*** u: unsiged int
    getal dat unsigned is d.w.z. dat het niet negatief kan zijn en een hogere bereik heeft in positieve waardes.
*** x: unsigned hexadecimal notation
   hexadecimale notatie van een argument
*** X: unSIGNED hexadecimal notation in CAPS
    hetzelfde maar dan in hoofdletters
 Een overzicht maken van de verschillende manieren waarop je printf kunt gebruiken zodat je de betekenis leert kennen van alle verschillende soorten valide (en invalide) invoer.


* oefenen met de originele printf
** met BABEL in deze org buffer
   :PROPERTIES:
   :ORDERED:  t
   :END:

 #+begin_src C :results value code :includes <stdio.h> <unistd.h>
int a = 100;
char c = 'c';
char d = 'd';

char *string = "hallo herld";
char *string2 = "bye world";
char *pointer = string;
char **ppointer = pointer;

/* 1 min of nul */
printf("|%s|\n|%.-9c|\n", string, c);
printf("|%02c|\n", c);
printf("|%.-3s|\n", string);

#+end_src

 #+RESULTS:
 #+begin_src C
 |hallo herld|
 |c        |
 |0c|
 |   |
 #+end_src

 #+RESULTS:

** in een aparte file en compileren via een shell
   [[./printfpractice.c]]
